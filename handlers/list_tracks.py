from aiogram import types, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from db_handlers.db_class import db
from utils.airport_codes import get_airport_name
from utils.aviasales_api import CURRENCY
from utils.validators import format_iso_date_to_user, format_price
from handlers.task import tracker_tasks

router = Router()

@router.message(lambda msg: msg.text == "üìã –ú–æ–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è")
async def list_user_trackers(message: types.Message, state: FSMContext):
    await db.connect()
    try:
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º FSM, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–≤–æ–¥ –Ω–µ –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–∏—Å–∫–∞ –≥–æ—Ä–æ–¥–æ–≤
        try:
            await state.clear()
        except Exception:
            pass
        # –ü–æ–ª—É—á–∞–µ–º user_id –ø–æ Telegram ID
        async with db.db.execute("SELECT id FROM users WHERE telegram_id = ?", (message.from_user.id,)) as cursor:
            user = await cursor.fetchone()

        if not user:
            await message.answer("‚ùó –í—ã –µ—â—ë –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.")
            return

        user_id = user["id"]
        trackers = await db.get_user_trackers(user_id)

        if not trackers:
            await message.answer("üîç –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–π.")
            return

        kb_rows = []
        for t in trackers:
            title = (
                f"{get_airport_name(t['origin'])} ‚Üí {get_airport_name(t['destination'])} | "
                f"{format_iso_date_to_user(t['date'][0])} | ‚â§ {format_price(t['price_limit'])} {CURRENCY.upper()}"
            )
            kb_rows.append([
                InlineKeyboardButton(text=title, callback_data=f"stop_tr_{t['tracker_id']}")
            ])

        kb = InlineKeyboardMarkup(inline_keyboard=kb_rows)
        await message.answer("üì° <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è:</b>", reply_markup=kb)

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–π: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–π.")


@router.callback_query(lambda c: c.data and c.data.startswith("stop_tr_"))
async def stop_selected_tracker(callback: types.CallbackQuery):
    try:
        tracker_id_str = callback.data.replace("stop_tr_", "", 1)
        tracker_id = int(tracker_id_str)
    except Exception:
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä", show_alert=False)
        return

    # –û—Ç–∫–ª—é—á–∞–µ–º –≤ –ë–î
    try:
        await db.connect()
        await db.deactivate_tracker(tracker_id)
    except Exception:
        pass

    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∑–∞–¥–∞—á—É, –µ—Å–ª–∏ –µ—Å—Ç—å
    task = tracker_tasks.pop(tracker_id, None)
    if task and not task.done():
        task.cancel()
        try:
            await task
        except Exception:
            pass

    await callback.answer("–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    await callback.message.edit_reply_markup(reply_markup=None)
    await callback.message.answer("‚ùå –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ.")
