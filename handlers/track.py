from aiogram import types, Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
import asyncio
from datetime import datetime

from db_handlers.db_class import db
from handlers.task import user_tasks
from utils.track_flight import track_flight
from utils.airport_codes import get_airport_name, find_airports_by_city, format_airport_option
from utils.aviasales_api import CURRENCY, get_price_for_date
from utils.validators import is_valid_date
from utils.flightradar_client import get_flight_status_by_number
from utils.airlines_icao import get_airline_by_icao

router = Router()

MAX_ACTIVE_TRACKERS = 5


class FlightStatusFSM(StatesGroup):
    waiting_flight_number = State()


class TrackFSM(StatesGroup):
    waiting_origin_city = State()
    waiting_destination_city = State()
    waiting_dates = State()
    waiting_price = State()


@router.message(lambda msg: msg.text == "üõ´ –°—Ç–∞—Ç—É—Å —Ä–µ–π—Å–∞")
async def ask_flight_number(message: types.Message, state: FSMContext):
    await state.set_state(FlightStatusFSM.waiting_flight_number)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ä–µ–π—Å–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä: <b>SU100</b> –∏–ª–∏ <b>AF1234</b>")


@router.message(FlightStatusFSM.waiting_flight_number)
async def handle_flight_number(message: types.Message, state: FSMContext):
    def format_dt(value: str) -> str:
        s = str(value or "").strip()
        if not s:
            return ""
        try:
            if s.endswith("Z"):
                s = s[:-1] + "+00:00"
            dt = datetime.fromisoformat(s)
            return dt.strftime("%d-%m-%Y %H:%M")
        except Exception:
            return s

    flight_number = (message.text or "").strip().upper().replace(" ", "")
    if not flight_number or len(flight_number) < 3:
        await message.answer("‚ùó –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ä–µ–π—Å–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä: <b>SU100</b>")
        return

    await message.answer("‚è≥ –ó–∞–ø—Ä–∞—à–∏–≤–∞—é —Å—Ç–∞—Ç—É—Å —Ä–µ–π—Å–∞...")
    data = await get_flight_status_by_number(flight_number)
    await state.clear()

    if not data:
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ä–µ–π—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–æ–º–µ—Ä —Ä–µ–π—Å–∞.")
        return

    status = data.get("status", "unknown")
    flight = data.get("flight", {}) or {}
    dep = flight.get("departure", {})
    arr = flight.get("arrival", {})
    dep_city = dep.get('city', '')
    dep_name = dep.get('name', '')
    arr_city = arr.get('city', '')
    arr_name = arr.get('name', '')

    dep_label = f"{dep_city} ({dep_name})" if dep_city or dep_name else "‚Äî"
    arr_label = f"{arr_city} ({arr_name})" if arr_city or arr_name else "‚Äî"

    # –ê–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏—è: –µ—Å–ª–∏ –≤ –æ—Ç–≤–µ—Ç–µ –ø—Ä–∏—à—ë–ª ICAO-–∫–æ–¥ (3 –±—É–∫–≤—ã), –º–∞–ø–ø–∏–º –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ —Å—Ç—Ä–∞–Ω—É
    airline_raw = str(flight.get('airline', '') or '').strip()
    airline_line = f"–ê–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏—è: {airline_raw}"
    maybe_code = airline_raw.upper()
    if len(maybe_code) == 3 and maybe_code.isalpha():
        name, country = get_airline_by_icao(maybe_code)
        if name or country:
            airline_line = f"–ê–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏—è: {name}{f' ({country})' if country else ''}"

    text = (
        f"‚úàÔ∏è –†–µ–π—Å <b>{flight.get('flight_number', flight_number)}</b>\n"
        f"üìã –°—Ç–∞—Ç—É—Å: <b>{status}</b>\n"
        f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
        f"üõ´ <b>–í—ã–ª–µ—Ç:</b> {dep_label}\n"
        f"‚Ä¢ üìÖ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é: {format_dt(dep.get('scheduled',''))}\n"
        f"‚Ä¢ ‚è± –æ—Ü–µ–Ω–æ—á–Ω–æ: {format_dt(dep.get('estimated',''))}\n"
        f"üõ¨ <b>–ü—Ä–∏–ª–µ—Ç:</b> {arr_label}\n"
        f"‚Ä¢ üìÖ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é: {format_dt(arr.get('scheduled',''))}\n"
        f"‚Ä¢ ‚è± –æ—Ü–µ–Ω–æ—á–Ω–æ: {format_dt(arr.get('estimated',''))}\n"
        f"üè∑ {airline_line}"
    )
    await message.answer(text)

    # –ï—Å–ª–∏ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å–∞–º–æ–ª—ë—Ç–∞ ‚Äî –æ—Ç–ø—Ä–∞–≤–∏–º –∫–∞—Ä—Ç—É —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    pos = data.get("position") if isinstance(data, dict) else None
    if isinstance(pos, dict):
        lat = pos.get("lat")
        lon = pos.get("lon")
        try:
            if lat is not None and lon is not None:
                # –Ø–Ω–¥–µ–∫—Å –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –∫–∞—Ä—Ç—ã —Ç—Ä–µ–±—É—é—Ç –ø–æ—Ä—è–¥–æ–∫ lon,lat
                lon_str = str(lon)
                lat_str = str(lat)
                map_url = (
                    "https://static-maps.yandex.ru/1.x/?"
                    f"ll={lon_str},{lat_str}&"
                    "z=6&size=600,400&l=map&"
                    f"pt={lon_str},{lat_str},pm2rdm"
                )
                await message.answer_photo(map_url, caption="–¢–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è —Å–∞–º–æ–ª—ë—Ç–∞")
        except Exception:
            # –ú–æ–ª—á–∞ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Å –≤–Ω–µ—à–Ω–∏–º —Å–µ—Ä–≤–∏—Å–æ–º –∫–∞—Ä—Ç, —á—Ç–æ–±—ã –Ω–µ –º–µ—à–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–º—É —Å—Ü–µ–Ω–∞—Ä–∏—é
            pass

@router.message(Command("track"))
async def track_command(message: types.Message):
    await db.connect()
    try:
        args = message.text.split()[1:]  # —É–±–∏—Ä–∞–µ–º /track
        if len(args) != 4:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω–æ–µ —á–∏—Å–ª–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤")

        origin = args[0].strip().upper()
        destination = args[1].strip().upper()
        dates = [d.strip() for d in args[2].split(",") if d.strip()]

        try:
            price_limit = int(args[3])
        except ValueError:
            await message.answer("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã. –ü—Ä–∏–º–µ—Ä: 7000")
            return

        user_id = await db.add_user(message.from_user.id, message.from_user.username)
        active_count = await db.count_active_trackers(user_id)
        allowed_slots = MAX_ACTIVE_TRACKERS - active_count

        if allowed_slots <= 0:
            await message.answer(
                f"‚ö† –£ –≤–∞—Å —É–∂–µ {active_count} –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–π. "
                f"–ú–∞–∫—Å–∏–º—É–º —Ä–∞–∑—Ä–µ—à–µ–Ω–æ {MAX_ACTIVE_TRACKERS}."
            )
            return

        added_dates = []
        skipped = []  # —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (date, reason)

        for date in dates:
            # 1) –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞/–ø—Ä–æ—à–ª–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
            if not is_valid_date(date):
                skipped.append((date, "–Ω–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞ (—Ñ–æ—Ä–º–∞—Ç YYYY-MM-DD –∏–ª–∏ –¥–∞—Ç–∞ –≤ –ø—Ä–æ—à–ª–æ–º)"))
                continue

            # 2) –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Å–ª–æ—Ç–æ–≤
            if allowed_slots <= 0:
                skipped.append((date, "–Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ (–¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç)"))
                continue

            # 3) –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ API (–≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å IATA + –µ—Å—Ç—å –ª–∏ —Ä–µ–π—Å—ã –Ω–∞ —ç—Ç—É –¥–∞—Ç—É)
            flight = await get_price_for_date(origin, destination, date)
            if not flight or (isinstance(flight, dict) and flight.get("error")):
                skipped.append((date, "—Ä–µ–π—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã (–ø—Ä–æ–≤–µ—Ä—å IATA-–∫–æ–¥—ã –∏ –¥–∞—Ç—É)"))
                continue

            # 4) –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–∞ –≤ –ë–î
            if await db.tracker_exists(user_id, origin, destination, date):
                skipped.append((date, "—É–∂–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è"))
                continue

            # 5) –≤—Å—ë –æ–∫ ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º –≤ –ë–î –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–∞—Å–∫
            tracker_id = await db.add_flight_tracker(user_id, origin, destination, date, price_limit)

            user_tasks.setdefault(message.from_user.id, [])
            task = asyncio.create_task(
                track_flight(
                    message.from_user.id,
                    origin,
                    destination,
                    date,
                    price_limit,
                    tracker_id=tracker_id,
                    initial_flight=flight
                )
            )
            user_tasks[message.from_user.id].append(task)

            added_dates.append(date)
            allowed_slots -= 1

        # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: —Ç–æ–ª—å–∫–æ –ø–æ —Ä–µ–∞–ª—å–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–º –¥–∞—Ç–∞–º
        if added_dates:
            origin_name = get_airport_name(origin) or origin
            destination_name = get_airport_name(destination) or destination
            await message.answer(
                f"üì° –û—Ç—Å–ª–µ–∂–∏–≤–∞—é —Ä–µ–π—Å—ã <b>{origin_name}</b> ‚Üí <b>{destination_name}</b>\n"
                f"–î–∞—Ç—ã: <b>{', '.join(added_dates)}</b>\n"
                f"–¶–µ–Ω–∞ –Ω–∏–∂–µ <b>{price_limit} {CURRENCY.upper()}</b>"
            )

        # –°–≤–æ–¥–∫–∞ –ø–æ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–º –¥–∞—Ç–∞–º (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if skipped:
            lines = [f"‚Ä¢ {d} ‚Äî {reason}" for d, reason in skipped]
            await message.answer("‚ö† –ü—Ä–æ–ø—É—â–µ–Ω—ã –¥–∞—Ç—ã:\n" + "\n".join(lines))

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        await message.answer(
            "‚ùó –§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã:\n<code>/track LED KGD 2025-08-04,2025-08-05 7000</code>"
        )


@router.message(lambda msg: msg.text == "‚úà –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å")
async def track_button_handler(message: types.Message, state: FSMContext):
    # –ó–∞–ø—É—Å–∫–∞–µ–º –¥–∏–∞–ª–æ–≥ –ø–æ —Å–±–æ—Ä—É –¥–∞–Ω–Ω—ã—Ö –≤ —á–µ–ª–æ–≤–µ–∫–æ-–ø–æ–Ω—è—Ç–Ω–æ–º –≤–∏–¥–µ
    await state.set_state(TrackFSM.waiting_origin_city)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –≤—ã–ª–µ—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ú–æ—Å–∫–≤–∞):")


@router.message(lambda msg: msg.text == "–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∞–≤–∏–∞—Ä–µ–π—Å–æ–≤")
async def tracking_info_handler(message: types.Message):
    await message.answer(
        "üì° –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∞–≤–∏–∞—Ä–µ–π—Å–æ–≤ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–Ω–∏–∂–µ–Ω–∏–∏ —Ü–µ–Ω—ã.\n\n"
        "–í–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "<code>/track &lt;–∫–æ–¥_–≥–æ—Ä–æ–¥–∞_–≤—ã–ª–µ—Ç–∞&gt; &lt;–∫–æ–¥_–≥–æ—Ä–æ–¥–∞_–ø—Ä–∏–ª—ë—Ç–∞&gt; "
        "&lt;–¥–∞—Ç—ã_–≤—ã–ª–µ—Ç–∞_—á–µ—Ä–µ–∑_–∑–∞–ø—è—Ç—É—é&gt; &lt;–º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è_—Ü–µ–Ω–∞&gt;</code>\n\n"
        "–ü—Ä–∏–º–µ—Ä:\n"
        "<code>/track LED KGD 2025-09-08,2025-09-09 7000</code>"
    )


# ===== –î–∏–∞–ª–æ–≥ FSM –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ –≥–æ—Ä–æ–¥–∞–º/–¥–∞—Ç–∞–º/—Ü–µ–Ω–µ =====

@router.message(TrackFSM.waiting_origin_city)
async def handle_origin_city(message: types.Message, state: FSMContext):
    text = (message.text or "").strip()
    data = await state.get_data()

    # –ü–æ–ø—ã—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∏–∑ —Ä–∞–Ω–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
    if text.isdigit() and data.get("origin_options"):
        idx = int(text) - 1
        options = data.get("origin_options") or []
        if 0 <= idx < len(options):
            iata, label = options[idx]
            await state.update_data(origin=iata, origin_options=None)
            await state.set_state(TrackFSM.waiting_destination_city)
            await message.answer(f"–ì–æ—Ä–æ–¥ –≤—ã–ª–µ—Ç–∞: {label} ‚Äî {iata}\n–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –ø—Ä–∏–ª—ë—Ç–∞:")
            return

    # –ò–Ω–∞—á–µ ‚Äî –≤–æ—Å–ø—Ä–∏–Ω–∏–º–∞–µ–º –∫–∞–∫ –≤–≤–æ–¥ –≥–æ—Ä–æ–¥–∞
    options = find_airports_by_city(text)
    if not options:
        await message.answer("–ù–µ –Ω–∞—à—ë–ª –∞—ç—Ä–æ–ø–æ—Ä—Ç—ã –¥–ª—è —ç—Ç–æ–≥–æ –≥–æ—Ä–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return
    if len(options) == 1:
        iata, label = options[0]
        await state.update_data(origin=iata)
        await state.set_state(TrackFSM.waiting_destination_city)
        await message.answer(f"–ì–æ—Ä–æ–¥ –≤—ã–ª–µ—Ç–∞: {label} ‚Äî {iata}\n–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –ø—Ä–∏–ª—ë—Ç–∞:")
        return
    list_text = "–ù–∞—à—ë–ª –Ω–µ—Å–∫–æ–ª—å–∫–æ –∞—ç—Ä–æ–ø–æ—Ä—Ç–æ–≤. –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä:\n" + "\n".join(
        [f"{idx+1}. {format_airport_option(iata, label)}" for idx, (iata, label) in enumerate(options[:10])]
    )
    await state.update_data(origin_options=options[:10])
    await message.answer(list_text)


@router.message(TrackFSM.waiting_destination_city)
async def handle_destination_city(message: types.Message, state: FSMContext):
    text = (message.text or "").strip()
    data = await state.get_data()

    # –ü–æ–ø—ã—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∏–∑ —Å–ø–∏—Å–∫–∞
    if text.isdigit() and data.get("destination_options"):
        idx = int(text) - 1
        options = data.get("destination_options") or []
        if 0 <= idx < len(options):
            iata, label = options[idx]
            await state.update_data(destination=iata, destination_options=None)
            await state.set_state(TrackFSM.waiting_dates)
            await message.answer(
                f"–ì–æ—Ä–æ–¥ –ø—Ä–∏–ª—ë—Ç–∞: {label} ‚Äî {iata}\n–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—ã –≤—ã–ª–µ—Ç–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD (–Ω–∞–ø—Ä. 2025-09-08,2025-09-09):"
            )
            return

    # –ò–Ω–∞—á–µ ‚Äî –∞–Ω–∞–ª–∏–∑ –≥–æ—Ä–æ–¥–∞
    options = find_airports_by_city(text)
    if not options:
        await message.answer("–ù–µ –Ω–∞—à—ë–ª –∞—ç—Ä–æ–ø–æ—Ä—Ç—ã –¥–ª—è —ç—Ç–æ–≥–æ –≥–æ—Ä–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return
    if len(options) == 1:
        iata, label = options[0]
        await state.update_data(destination=iata)
        await state.set_state(TrackFSM.waiting_dates)
        await message.answer(
            f"–ì–æ—Ä–æ–¥ –ø—Ä–∏–ª—ë—Ç–∞: {label} ‚Äî {iata}\n–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—ã –≤—ã–ª–µ—Ç–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD (–Ω–∞–ø—Ä. 2025-09-08,2025-09-09):"
        )
        return
    list_text = "–ù–∞—à—ë–ª –Ω–µ—Å–∫–æ–ª—å–∫–æ –∞—ç—Ä–æ–ø–æ—Ä—Ç–æ–≤. –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä:\n" + "\n".join(
        [f"{idx+1}. {format_airport_option(iata, label)}" for idx, (iata, label) in enumerate(options[:10])]
    )
    await state.update_data(destination_options=options[:10])
    await message.answer(list_text)


@router.message(TrackFSM.waiting_dates)
async def handle_dates(message: types.Message, state: FSMContext):
    raw = (message.text or "").strip()
    dates = [d.strip() for d in raw.split(",") if d.strip()]
    bad = [d for d in dates if not is_valid_date(d)]
    if not dates or bad:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç YYYY-MM-DD –∏ –¥–∞—Ç—ã –Ω–µ –∏–∑ –ø—Ä–æ—à–ª–æ–≥–æ.")
        return
    await state.update_data(dates=dates)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ):")
    await state.set_state(TrackFSM.waiting_price)


@router.message(TrackFSM.waiting_price)
async def handle_price(message: types.Message, state: FSMContext):
    text = (message.text or "").strip()
    try:
        price_limit = int(text)
    except ValueError:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ü–µ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 7000")
        return

    data = await state.get_data()
    origin = data.get("origin")
    destination = data.get("destination")
    dates = data.get("dates", [])

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ª–æ–≥–∏–∫—É —á–µ—Ä–µ–∑ /track, —á—Ç–æ–±—ã –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∏
    cmd = f"/track {origin} {destination} {','.join(dates)} {price_limit}"
    fake = message.model_copy(update={"text": cmd})
    await state.clear()
    await track_command(fake)
